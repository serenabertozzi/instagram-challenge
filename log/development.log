Started GET "/" for 127.0.0.1 at 2021-11-13 10:21:26 +0000
  [1m[35m (1.1ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
Processing by Rails::WelcomeController#index as HTML
  Rendering /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/rails/welcome/index.html.erb
  Rendered /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/rails/welcome/index.html.erb (Duration: 4.2ms | Allocations: 599)
Completed 200 OK in 20ms (Views: 7.7ms | ActiveRecord: 0.0ms | Allocations: 4770)


  [1m[35m (195.0ms)[0m  [1m[35mCREATE DATABASE "db/instagram-development" ENCODING = 'utf8'[0m
  [1m[35m (45.9ms)[0m  [1m[35mCREATE DATABASE "db/insta-test" ENCODING = 'utf8'[0m
  [1m[35m (29.0ms)[0m  [1m[35mCREATE TABLE "schema_migrations" ("version" character varying NOT NULL PRIMARY KEY)[0m
  [1m[35m (7.8ms)[0m  [1m[35mCREATE TABLE "ar_internal_metadata" ("key" character varying NOT NULL PRIMARY KEY, "value" character varying, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_try_advisory_lock(6105329818106358945)[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to DeviseCreateAccounts (20211113105350)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (8.8ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" bigserial primary key, "email" character varying DEFAULT '' NOT NULL, "encrypted_password" character varying DEFAULT '' NOT NULL, "reset_password_token" character varying, "reset_password_sent_at" timestamp, "remember_created_at" timestamp, "sign_in_count" integer DEFAULT 0 NOT NULL, "current_sign_in_at" timestamp, "last_sign_in_at" timestamp, "current_sign_in_ip" character varying, "last_sign_in_ip" character varying, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[35m (0.7ms)[0m  [1m[35mCREATE UNIQUE INDEX "index_accounts_on_email" ON "accounts" ("email")[0m
  [1m[35m (0.5ms)[0m  [1m[35mCREATE UNIQUE INDEX "index_accounts_on_reset_password_token" ON "accounts" ("reset_password_token")[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ($1) RETURNING "version"[0m  [["version", "20211113105350"]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (1.0ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mActiveRecord::InternalMetadata Create (1.8ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "key"[0m  [["key", "environment"], ["value", "development"], ["created_at", "2021-11-13 11:03:49.756248"], ["updated_at", "2021-11-13 11:03:49.756248"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[35m (0.4ms)[0m  [1m[34mSELECT pg_advisory_unlock(6105329818106358945)[0m
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started GET "/" for 127.0.0.1 at 2021-11-13 11:07:54 +0000
  [1m[35m (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  
ActionController::RoutingError (uninitialized constant HomeController):
  
Started GET "/" for 127.0.0.1 at 2021-11-13 11:09:58 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.4ms | Allocations: 159)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1095:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1147:10)
    at Module.load (node:internal/modules/cjs/loader:975:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:999:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1095:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1147:10)
    at Module.load (node:internal/modules/cjs/loader:975:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCon
  Rendered layout layouts/application.html.erb (Duration: 1254.0ms | Allocations: 15860)
Completed 500 Internal Server Error in 1258ms (ActiveRecord: 0.0ms | Allocations: 18380)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:10:00 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.0ms | Allocations: 38)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1095:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1147:10)
    at Module.load (node:internal/modules/cjs/loader:975:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:999:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1095:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1147:10)
    at Module.load (node:internal/modules/cjs/loader:975:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: "Enable warnings for partial dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.wrappedContextCritical'.",
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: "Enable recursive directory lookup for partial dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.wrappedContextRecursive'.",
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: "Set the inner regular expression for partial dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.wrappedContextRegExp'.",
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      ModuleOptionsNormalized: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
 
  Rendered layout layouts/application.html.erb (Duration: 736.8ms | Allocations: 5259)
Completed 500 Internal Server Error in 738ms (ActiveRecord: 0.0ms | Allocations: 5655)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:26:36 +0000
  [1m[35m (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.6ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
env: node: No such file or directory
env: node: No such file or directory

  Rendered layout layouts/application.html.erb (Duration: 390.0ms | Allocations: 8923)
Completed 500 Internal Server Error in 408ms (ActiveRecord: 0.0ms | Allocations: 12522)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:26:39 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.2ms | Allocations: 38)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
env: node: No such file or directory
env: node: No such file or directory

  Rendered layout layouts/application.html.erb (Duration: 282.1ms | Allocations: 5427)
Completed 500 Internal Server Error in 286ms (ActiveRecord: 0.0ms | Allocations: 5852)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:31:36 +0000
  [1m[35m (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.5ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
env: node: No such file or directory
env: node: No such file or directory

  Rendered layout layouts/application.html.erb (Duration: 295.7ms | Allocations: 8923)
Completed 500 Internal Server Error in 302ms (ActiveRecord: 0.0ms | Allocations: 12522)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:31:39 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.2ms | Allocations: 38)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
env: node: No such file or directory
env: node: No such file or directory

  Rendered layout layouts/application.html.erb (Duration: 265.5ms | Allocations: 5428)
Completed 500 Internal Server Error in 269ms (ActiveRecord: 0.0ms | Allocations: 5853)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:32:12 +0000
  [1m[35m (1.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
env: node: No such file or directory
env: node: No such file or directory

  Rendered layout layouts/application.html.erb (Duration: 309.1ms | Allocations: 8923)
Completed 500 Internal Server Error in 315ms (ActiveRecord: 0.0ms | Allocations: 12522)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:40:22 +0000
  [1m[35m (1.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.7ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 1132.1ms | Allocations: 8923)
Completed 500 Internal Server Error in 1141ms (ActiveRecord: 0.0ms | Allocations: 12522)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:40:25 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.1ms | Allocations: 38)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 766.8ms | Allocations: 5439)
Completed 500 Internal Server Error in 768ms (ActiveRecord: 0.0ms | Allocations: 5864)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:41:33 +0000
  [1m[35m (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.5ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 1032.1ms | Allocations: 8931)
Completed 500 Internal Server Error in 1038ms (ActiveRecord: 0.0ms | Allocations: 12530)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:42:25 +0000
  [1m[35m (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.8ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 1012.3ms | Allocations: 8929)
Completed 500 Internal Server Error in 1022ms (ActiveRecord: 0.0ms | Allocations: 12528)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:43:44 +0000
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.9ms | Allocations: 482)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 1026.5ms | Allocations: 16992)
Completed 500 Internal Server Error in 1040ms (ActiveRecord: 0.0ms | Allocations: 21636)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:44:48 +0000
  [1m[35m (1.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.2ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 882.3ms | Allocations: 8421)
Completed 500 Internal Server Error in 888ms (ActiveRecord: 0.0ms | Allocations: 12020)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:45:09 +0000
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.6ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 942.7ms | Allocations: 8931)
Completed 500 Internal Server Error in 948ms (ActiveRecord: 0.0ms | Allocations: 12530)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:45:49 +0000
  [1m[35m (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.6ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 974.6ms | Allocations: 16570)
Completed 500 Internal Server Error in 982ms (ActiveRecord: 0.0ms | Allocations: 20169)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:46:34 +0000
  [1m[35m (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.5ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 969.1ms | Allocations: 8915)
Completed 500 Internal Server Error in 975ms (ActiveRecord: 0.0ms | Allocations: 12514)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:46:40 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.1ms | Allocations: 38)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 865.9ms | Allocations: 5431)
Completed 500 Internal Server Error in 867ms (ActiveRecord: 0.0ms | Allocations: 5856)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:48:29 +0000
  [1m[35m (3.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.4ms | Allocations: 374)
[Webpacker] Compiling...
[Webpacker] Compilation failed:
warning ../../../package.json: No license field
/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.node should be one of these:
   false | object { __dirname?, __filename?, global? }
   -> Include polyfills or mocks for various node stuff.
   Details:
    * configuration.node has an unknown property 'dgram'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'fs'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'net'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'tls'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    * configuration.node has an unknown property 'child_process'. These properties are valid:
      object { __dirname?, __filename?, global? }
      -> Options object for node compatibility features.
    at validate (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/node_modules/schema-utils/dist/validate.js:105:11)
    at validateSchema (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/validateSchema.js:78:2)
    at create (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:108:24)
    at webpack (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/webpack.js:150:32)
    at f (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/lib/index.js:55:16)
    at processOptions (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:272:16)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/yargs/yargs.js:576:18)
    at /Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at runCli (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:69:2)
    at Object.<anonymous> (/Users/serenabertozzi/Makers/week-8/instagram-challenge/node_modules/webpack/bin/webpack.js:162:2)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  errors: [
    {
      keyword: 'anyOf',
      dataPath: '.node',
      schemaPath: '#/anyOf',
      params: {},
      message: 'should match some schema in anyOf',
      schema: [ { enum: [ false ] }, { '$ref': '#/definitions/NodeOptions' } ],
      parentSchema: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      data: {
        dgram: 'empty',
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
        child_process: 'empty'
      },
      children: [
        {
          keyword: 'enum',
          dataPath: '.node',
          schemaPath: '#/anyOf/0/enum',
          params: { allowedValues: [Array] },
          message: 'should be equal to one of the allowed values',
          schema: [ false ],
          parentSchema: { enum: [Array] },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'dgram' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'fs' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'net' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'tls' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        },
        {
          keyword: 'additionalProperties',
          dataPath: '.node',
          schemaPath: '#/definitions/NodeOptions/additionalProperties',
          params: { additionalProperty: 'child_process' },
          message: 'should NOT have additional properties',
          schema: false,
          parentSchema: {
            description: 'Options object for node compatibility features.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          data: {
            dgram: 'empty',
            fs: 'empty',
            net: 'empty',
            tls: 'empty',
            child_process: 'empty'
          },
          children: undefined
        }
      ]
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, asset: import('../lib/stats/DefaultStatsFactoryPlugin').StatsAsset) => boolean)"
          }
        ]
      },
      AssetFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/AssetFilterItemTypes' }
        ]
      },
      AssetGeneratorDataUrl: {
        description: 'The options for data url generator.',
        anyOf: [
          { '$ref': '#/definitions/AssetGeneratorDataUrlOptions' },
          { '$ref': '#/definitions/AssetGeneratorDataUrlFunction' }
        ]
      },
      AssetGeneratorDataUrlFunction: {
        description: 'Function that executes for module and should return an DataUrl string.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => string)"
      },
      AssetGeneratorDataUrlOptions: {
        description: 'Options object for data url generation.',
        type: 'object',
        additionalProperties: false,
        properties: {
          encoding: {
            description: 'Asset encoding (defaults to base64).',
            enum: [Array]
          },
          mimetype: {
            description: 'Asset mimetype (getting from file extension by default).',
            type: 'string'
          }
        }
      },
      AssetGeneratorOptions: {
        description: 'Generator options for asset modules.',
        type: 'object',
        implements: [
          '#/definitions/AssetInlineGeneratorOptions',
          '#/definitions/AssetResourceGeneratorOptions'
        ],
        additionalProperties: false,
        properties: {
          dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' },
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AssetInlineGeneratorOptions: {
        description: 'Generator options for asset/inline modules.',
        type: 'object',
        additionalProperties: false,
        properties: { dataUrl: { '$ref': '#/definitions/AssetGeneratorDataUrl' } }
      },
      AssetModuleFilename: {
        description: "The filename of asset modules as relative path inside the 'output.path' directory.",
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AssetParserDataUrlFunction: {
        description: 'Function that executes for module and should return whenever asset should be inlined as DataUrl.',
        instanceof: 'Function',
        tsType: "((source: string | Buffer, context: { filename: string, module: import('../lib/Module') }) => boolean)"
      },
      AssetParserDataUrlOptions: {
        description: 'Options object for DataUrl condition.',
        type: 'object',
        additionalProperties: false,
        properties: {
          maxSize: {
            description: 'Maximum size of asset that should be inline as modules. Default: 8kb.',
            type: 'number'
          }
        }
      },
      AssetParserOptions: {
        description: 'Parser options for asset modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dataUrlCondition: {
            description: 'The condition for inlining the asset as DataUrl.',
            anyOf: [Array]
          }
        }
      },
      AssetResourceGeneratorOptions: {
        description: 'Generator options for asset/resource modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          emit: {
            description: "Emit an output asset from this asset module. This can be set to 'false' to omit emitting e. g. for SSR.",
            type: 'boolean'
          },
          filename: { '$ref': '#/definitions/FilenameTemplate' },
          publicPath: { '$ref': '#/definitions/RawPublicPath' }
        }
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: "Specifies the filename template of output files of non-initial chunks on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), 'module' (ESM), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'import' (ESM), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Clean: {
        description: 'Clean the output directory before emit.',
        anyOf: [
          { type: 'boolean' },
          { '$ref': '#/definitions/CleanOptions' }
        ]
      },
      CleanOptions: {
        description: 'Advanced options for cleaning assets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          dry: {
            description: 'Log the assets that should be removed instead of deleting them.',
            type: 'boolean'
          },
          keep: { description: 'Keep these assets.', anyOf: [Array] }
        }
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EmptyGeneratorOptions: {
        description: 'No generator options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EmptyParserOptions: {
        description: 'No parser options are supported for this module type.',
        type: 'object',
        additionalProperties: false
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/EntryFilename' },
          import: { '$ref': '#/definitions/EntryItem' },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncChunks: {
            description: 'Enable/disable creating async chunks that are loaded on demand.',
            type: 'boolean'
          },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          layer: { '$ref': '#/definitions/Layer' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryFilename: {
        description: "Specifies the filename of the output file on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            anyOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            anyOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsCommon: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExperimentsNormalized: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        implements: [ '#/definitions/ExperimentsCommon' ],
        additionalProperties: false,
        properties: {
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          backCompat: {
            description: 'Enable backward-compat layer with deprecation warnings for many webpack 4 APIs.',
            type: 'boolean'
          },
          buildHttp: {
            description: 'Build http(s): urls using a lockfile and resource content cache.',
            oneOf: [Array]
          },
          cacheUnaffected: {
            description: 'Enable additional in memory caching of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          futureDefaults: {
            description: 'Apply defaults of next major version.',
            type: 'boolean'
          },
          layers: { description: 'Enable module layers.', type: 'boolean' },
          lazyCompilation: {
            description: 'Compile entrypoints and import()s only when they are accessed.',
            oneOf: [Array]
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object],
            properties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '(((data: ExternalItemFunctionData, callback: (err?: Error, result?: ExternalItemValue) => void) => void) | ((data: ExternalItemFunctionData) => Promise<ExternalItemValue>))'
          }
        ]
      },
      ExternalItemFunctionData: {
        description: "Data object passed as argument when a function is set for 'externals'.",
        type: 'object',
        additionalProperties: false,
        properties: {
          context: {
            description: 'The directory in which the request is placed.',
            type: 'string'
          },
          contextInfo: {
            description: 'Contextual information.',
            type: 'object',
            tsType: "import('../lib/ModuleFactory').ModuleFactoryCreateDataContextInfo"
          },
          dependencyType: {
            description: 'The category of the referencing dependencies.',
            type: 'string'
          },
          getResolve: {
            description: 'Get a resolve function with the current resolver options.',
            instanceof: 'Function',
            tsType: '((options?: ResolveOptions) => ((context: string, request: string, callback: (err?: Error, result?: string) => void) => void) | ((context: string, request: string) => Promise<string>))'
          },
          request: {
            description: 'The request as written by the user in the require/import expression/statement.',
            type: 'string'
          }
        }
      },
      ExternalItemValue: {
        description: 'The dependency used for the external.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            description: '`true`: The dependency name is used as target of the external.',
            type: 'boolean'
          },
          {
            description: 'The target of the external.',
            type: 'string'
          },
          { type: 'object' }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script',    'node-commonjs'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowCollectingMemory: {
            description: 'Allows to collect unused memory allocated during deserialization. This requires copying data into smaller buffers and has a performance cost.',
            type: 'boolean'
          },
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          compression: {
            description: 'Compression type used for the cache files.',
            enum: [Array]
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: 'Time in ms after which idle period the cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          idleTimeoutAfterLargeChanges: {
            description: 'Time in ms after which idle period the cache storing should happen when larger changes has been detected (cumulative build time > 2 x avg cache store time).',
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: 'Time in ms after which idle period the initial cache storing should happen.',
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          maxAge: {
            description: 'Time for which unused cache entries stay in the filesystem cache at minimum (in milliseconds).',
            type: 'number',
            minimum: 0
          },
          maxMemoryGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (0 = no memory cache used, 1 = may be removed after unused for a single compilation, ..., Infinity: kept forever). Cache entries will be deserialized from disk when removed from memory cache.',
            type: 'number',
            minimum: 0
          },
          memoryCacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules in memory.',
            type: 'boolean'
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          profile: {
            description: 'Track and log detailed timing information for individual cache items.',
            type: 'boolean'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: "Specifies the filename of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        oneOf: [ { '$ref': '#/definitions/FilenameTemplate' } ]
      },
      FilenameTemplate: {
        description: "Specifies the filename template of output files on disk. You must **not** specify an absolute path here, but the path may contain folders separated by '/'! The specified path is joined with the value of the 'output.path' option to determine the location on disk.",
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GeneratorOptionsByModuleType: {
        description: 'Specify options for each generator.',
        type: 'object',
        additionalProperties: {
          description: 'Options for generating.',
          type: 'object',
          additionalProperties: true
        },
        properties: {
          asset: { '$ref': '#/definitions/AssetGeneratorOptions' },
          'asset/inline': { '$ref': '#/definitions/AssetInlineGeneratorOptions' },
          'asset/resource': { '$ref': '#/definitions/AssetResourceGeneratorOptions' },
          javascript: { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/auto': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/dynamic': { '$ref': '#/definitions/EmptyGeneratorOptions' },
          'javascript/esm': { '$ref': '#/definitions/EmptyGeneratorOptions' }
        }
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: "The filename of the Hot Update Main File. It is inside the 'output.path' directory.",
        type: 'string',
        absolutePath: false
      },
      HttpUriAllowedUris: {
        description: 'List of allowed URIs for building http resources.',
        cli: { exclude: true },
        oneOf: [ { '$ref': '#/definitions/HttpUriOptionsAllowedUris' } ]
      },
      HttpUriOptions: {
        description: 'Options for building http resources.',
        type: 'object',
        additionalProperties: false,
        properties: {
          allowedUris: { '$ref': '#/definitions/HttpUriOptionsAllowedUris' },
          cacheLocation: {
            description: "Location where resource content is stored for lockfile entries. It's also possible to disable storing by passing false.",
            anyOf: [Array]
          },
          frozen: {
            description: 'When set, anything that would lead to a modification of the lockfile or any resource content, will result in an error.',
            type: 'boolean'
          },
          lockfileLocation: {
            description: 'Location of the lockfile.',
            type: 'string',
            absolutePath: true
          },
          upgrade: {
            description: 'When set, resources of existing lockfile entries will be fetched and entries will be upgraded when resource content has changed.',
            type: 'boolean'
          }
        },
        required: [ 'allowedUris' ]
      },
      HttpUriOptionsAllowedUris: {
        description: 'List of allowed URIs (resp. the beginning of them).',
        type: 'array',
        items: {
          description: 'List of allowed URIs (resp. the beginning of them).',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          appendOnly: {
            description: 'Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          colors: {
            description: 'Enables/Disables colorful output. This option is only used when no custom console is provided.',
            type: 'boolean'
          },
          console: {
            description: 'Custom console used for logging.',
            tsType: 'Console'
          },
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] },
          stream: {
            description: 'Stream used for logging output. Defaults to process.stderr. This option is only used when no custom console is provided.',
            tsType: 'NodeJS.WritableStream'
          }
        }
      },
      JavascriptParserOptions: {
        description: 'Parser options for javascript modules.',
        type: 'object',
        additionalProperties: true,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          browserify: {
            description: 'Enable/disable special handling for browserify bundles.',
            type: 'boolean'
          },
          commonjs: {
            description: 'Enable/disable parsing of CommonJs syntax.',
            type: 'boolean'
          },
          commonjsMagicComments: {
            description: 'Enable/disable parsing of magic comments in CommonJs syntax.',
            type: 'boolean'
          },
          exportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ..." and "export ... from ...".',
            enum: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          harmony: {
            description: 'Enable/disable parsing of EcmaScript Modules syntax.',
            type: 'boolean'
          },
          import: {
            description: 'Enable/disable parsing of import() syntax.',
            type: 'boolean'
          },
          importExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "import ... from ...".',
            enum: [Array]
          },
          node: { '$ref': '#/definitions/Node' },
          reexportExportsPresence: {
            description: 'Specifies the behavior of invalid export names in "export ... from ...". This might be useful to disable during the migration from "export ... from ..." to "export type ... from ..." when reexporting types in TypeScript.',
            enum: [Array]
          },
          requireContext: {
            description: 'Enable/disable parsing of require.context syntax.',
            type: 'boolean'
          },
          requireEnsure: {
            description: 'Enable/disable parsing of require.ensure syntax.',
            type: 'boolean'
          },
          requireInclude: {
            description: 'Enable/disable parsing of require.include syntax.',
            type: 'boolean'
          },
          requireJs: {
            description: 'Enable/disable parsing of require.js special syntax like require.config, requirejs.config, require.version and requirejs.onError.',
            type: 'boolean'
          },
          strictExportPresence: {
            description: `Deprecated in favor of "exportsPresence". Emit errors instead of warnings when imported names don't exist in imported module.`,
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          system: {
            description: 'Enable/disable parsing of System.js special syntax like System.import, System.get, System.set and System.register.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          url: {
            description: 'Enable/disable parsing of new URL() syntax.',
            anyOf: [Array]
          },
          worker: {
            description: 'Disable or configure parsing of WebWorker syntax like new Worker() or navigator.serviceWorker.register().',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Layer: {
        description: 'Specifies the layer in which modules of this entrypoint are placed.',
        anyOf: [ { enum: [Array] }, { type: 'string', minLength: 1 } ]
      },
      LazyCompilationDefaultBackendOptions: {
        description: 'Options for the default backend.',
        type: 'object',
        additionalProperties: false,
        properties: {
          client: { description: 'A custom client.', type: 'string' },
          listen: {
            description: 'Specifies where to listen to from the server.',
            anyOf: [Array]
          },
          protocol: {
            description: 'Specifies the protocol the client should use to connect to the server.',
            enum: [Array]
          },
          server: {
            description: 'Specifies how to create the server handling the EventSource requests.',
            anyOf: [Array]
          }
        }
      },
      LazyCompilationOptions: {
        description: 'Options for compiling entrypoints and import()s only when they are accessed.',
        type: 'object',
        additionalProperties: false,
        properties: {
          backend: {
            description: 'Specifies the backend that should be used for handling client keep alive.',
            anyOf: [Array]
          },
          entries: {
            description: 'Enable/disable lazy compilation for entries.',
            type: 'boolean'
          },
          imports: {
            description: 'Enable/disable lazy compilation for import() modules.',
            type: 'boolean'
          },
          test: {
            description: 'Specify which entrypoints or import()ed modules should be lazily compiled. This is matched with the imported module and not the entrypoint name.',
            anyOf: [Array]
          }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          cacheUnaffected: {
            description: 'Additionally cache computation of modules that are unchanged and reference only unchanged modules.',
            type: 'boolean'
          },
          maxGenerations: {
            description: 'Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).',
            type: 'number',
            minimum: 1
          },
          type: { description: 'In memory caching.', enum: [Array] }
        },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleFilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: "((name: string, module: import('../lib/stats/DefaultStatsFactoryPlugin').StatsModule, type: 'module' | 'chunk' | 'root-of-chunk' | 'nested') => boolean)"
          }
        ]
      },
      ModuleFilterTypes: {
        description: 'Filtering modules.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ModuleFilterItemTypes' }
        ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: "Enable recursive directory lookup for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRecursive'.",
            type: 'boolean'
          },
          exprContextRegExp: {
            description: "Sets the default regular expression for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRegExp'.",
            anyOf: [Array]
          },
          exprContextRequest: {
            description: "Set the default request for full dynamic dependencies. Deprecated: This option has moved to 'module.parser.javascript.exprContextRequest'.",
            type: 'string'
          },
          generator: { '$ref': '#/definitions/GeneratorOptionsByModuleType' },
          noParse: { '$ref': '#/definitions/NoParse' },
          parser: { '$ref': '#/definitions/ParserOptionsByModuleType' },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module. Deprecated: This option has moved to 'module.parser.javascript.strictExportPresence'.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: "Handle the this context correctly according to the spec for namespace objects. Deprecated: This option has moved to 'module.parser.javascript.strictThisContextOnImports'.",
            type: 'boolean'
          },
          unknownContextCritical: {
            description: "Enable warnings when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextCritical'.",
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: "Enable recursive directory lookup when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRecursive'.",
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: "Sets the regular expression when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRegExp'.",
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: "Sets the request when using the require function in a not statically analyse-able way. Deprecated: This option has moved to 'module.parser.javascript.unknownContextRequest'.",
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedCo
  Rendered layout layouts/application.html.erb (Duration: 942.3ms | Allocations: 8913)
Completed 500 Internal Server Error in 948ms (ActiveRecord: 0.0ms | Allocations: 12512)


  
ActionView::Template::Error (Webpacker can't find application.js in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs/manifest.json. Possible causes:
1. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2. webpack has not yet re-run to reflect updates.
3. You have misconfigured Webpacker's config/webpacker.yml file.
4. Your webpack configuration is not creating a manifest.
Your manifest contains:
{
}
):
     7:     <%= csp_meta_tag %>
     8: 
     9:     <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    10:     <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
    11:   </head>
    12: 
    13:   <body>
  
app/views/layouts/application.html.erb:10
Started GET "/" for 127.0.0.1 at 2021-11-13 11:49:22 +0000
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.1ms | Allocations: 374)
[Webpacker] Compiling...
Started GET "/" for 127.0.0.1 at 2021-11-13 11:49:24 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.0ms | Allocations: 38)
[Webpacker] Compiling...
[Webpacker] Compiled all packs in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs
[Webpacker] warning ../../../package.json: No license field

[Webpacker] Hash: e2a8a876c5815bee1e21
Version: webpack 4.46.0
Time: 640ms
Built at: 11/13/2021 11:49:24 AM
                                     Asset       Size       Chunks                         Chunk Names
    js/application-e421b4aa3f716bebdab1.js    125 KiB  application  [emitted] [immutable]  application
js/application-e421b4aa3f716bebdab1.js.map    139 KiB  application  [emitted] [dev]        application
                             manifest.json  364 bytes               [emitted]              
Entrypoint application = js/application-e421b4aa3f716bebdab1.js js/application-e421b4aa3f716bebdab1.js.map
[./app/javascript/channels sync recursive _channel\.js$] ./app/javascript/channels sync _channel\.js$ 160 bytes {application} [built]
[./app/javascript/channels/index.js] 211 bytes {application} [built]
[./app/javascript/packs/application.js] 492 bytes {application} [built]
[./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 552 bytes {application} [built]
    + 3 hidden modules

  Rendered layout layouts/application.html.erb (Duration: 1615.0ms | Allocations: 13691)
Completed 200 OK in 1621ms (Views: 1617.1ms | ActiveRecord: 0.0ms | Allocations: 17333)


[Webpacker] Compiled all packs in /Users/serenabertozzi/Makers/week-8/instagram-challenge/public/packs
[Webpacker] warning ../../../package.json: No license field

[Webpacker] Hash: e2a8a876c5815bee1e21
Version: webpack 4.46.0
Time: 266ms
Built at: 11/13/2021 11:49:25 AM
                                     Asset       Size       Chunks                         Chunk Names
    js/application-e421b4aa3f716bebdab1.js    125 KiB  application  [emitted] [immutable]  application
js/application-e421b4aa3f716bebdab1.js.map    139 KiB  application  [emitted] [dev]        application
                             manifest.json  364 bytes               [emitted]              
Entrypoint application = js/application-e421b4aa3f716bebdab1.js js/application-e421b4aa3f716bebdab1.js.map
[./app/javascript/channels sync recursive _channel\.js$] ./app/javascript/channels sync _channel\.js$ 160 bytes {application} [built]
[./app/javascript/channels/index.js] 211 bytes {application} [built]
[./app/javascript/packs/application.js] 492 bytes {application} [built]
[./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 552 bytes {application} [built]
    + 3 hidden modules

  Rendered layout layouts/application.html.erb (Duration: 830.2ms | Allocations: 8060)
Completed 200 OK in 831ms (Views: 830.4ms | ActiveRecord: 0.0ms | Allocations: 8549)


Started GET "/" for 127.0.0.1 at 2021-11-13 11:51:18 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.2ms | Allocations: 43)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 13.3ms | Allocations: 3612)
Completed 200 OK in 17ms (Views: 14.5ms | ActiveRecord: 0.0ms | Allocations: 4194)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:09:39 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 141)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 150)
  Rendered layout layouts/application.html.erb (Duration: 15.5ms | Allocations: 4364)
Completed 200 OK in 22ms (Views: 19.8ms | Allocations: 5815)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:10:55 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.6ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.6ms | Allocations: 145)
  Rendered layout layouts/application.html.erb (Duration: 26.5ms | Allocations: 4332)
Completed 200 OK in 34ms (Views: 30.8ms | Allocations: 5788)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:11:50 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.6ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 142)
  Rendered layout layouts/application.html.erb (Duration: 15.9ms | Allocations: 4331)
Completed 200 OK in 22ms (Views: 19.6ms | Allocations: 5797)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:12:20 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.1ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 145)
  Rendered layout layouts/application.html.erb (Duration: 12.5ms | Allocations: 4332)
Completed 200 OK in 19ms (Views: 16.3ms | Allocations: 5788)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:12:40 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 143)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.4ms | Allocations: 145)
  Rendered layout layouts/application.html.erb (Duration: 14.7ms | Allocations: 4346)
Completed 200 OK in 22ms (Views: 18.3ms | Allocations: 5810)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:14:57 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.6ms | Allocations: 141)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 145)
  Rendered layout layouts/application.html.erb (Duration: 20.8ms | Allocations: 4343)
Completed 200 OK in 30ms (Views: 27.2ms | Allocations: 5806)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:15:53 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.4ms | Allocations: 129)
  Rendered layout layouts/application.html.erb (Duration: 14.9ms | Allocations: 4316)
Completed 200 OK in 26ms (Views: 20.3ms | Allocations: 5776)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:16:15 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 3.7ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 129)
  Rendered layout layouts/application.html.erb (Duration: 21.5ms | Allocations: 4316)
Completed 200 OK in 33ms (Views: 26.8ms | Allocations: 5775)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:17:02 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.1ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.4ms | Allocations: 125)
  Rendered layout layouts/application.html.erb (Duration: 15.9ms | Allocations: 4312)
Completed 200 OK in 27ms (Views: 21.9ms | Allocations: 5768)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:17:18 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.3ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 125)
  Rendered layout layouts/application.html.erb (Duration: 29.0ms | Allocations: 4312)
Completed 200 OK in 36ms (Views: 33.2ms | Allocations: 5768)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:17:42 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.2ms | Allocations: 38)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.1ms | Allocations: 40)
  Rendered layout layouts/application.html.erb (Duration: 12.9ms | Allocations: 3562)
Completed 200 OK in 16ms (Views: 14.0ms | Allocations: 4052)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:18:02 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.2ms | Allocations: 38)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.1ms | Allocations: 40)
  Rendered layout layouts/application.html.erb (Duration: 15.0ms | Allocations: 3562)
Completed 200 OK in 19ms (Views: 16.5ms | Allocations: 4005)


Started GET "/" for 127.0.0.1 at 2021-11-13 14:22:21 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.4ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 124)
  Rendered layout layouts/application.html.erb (Duration: 16.5ms | Allocations: 4312)
Completed 200 OK in 26ms (Views: 22.2ms | Allocations: 5721)


Started GET "/" for 127.0.0.1 at 2021-11-14 07:54:48 +0000
  [1m[35m (2.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.6ms | Allocations: 357)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 133)
  Rendered layout layouts/application.html.erb (Duration: 10.2ms | Allocations: 7027)
Completed 200 OK in 16ms (Views: 11.7ms | ActiveRecord: 0.0ms | Allocations: 10795)


Started GET "/" for 127.0.0.1 at 2021-11-14 07:55:01 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.1ms | Allocations: 43)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 41)
  Rendered layout layouts/application.html.erb (Duration: 9.0ms | Allocations: 3714)
Completed 200 OK in 11ms (Views: 9.7ms | ActiveRecord: 0.0ms | Allocations: 4269)


Started GET "/" for 127.0.0.1 at 2021-11-14 07:55:55 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.9ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.4ms | Allocations: 129)
  Rendered layout layouts/application.html.erb (Duration: 43.7ms | Allocations: 4322)
Completed 200 OK in 55ms (Views: 48.0ms | ActiveRecord: 0.0ms | Allocations: 5773)


Started GET "/" for 127.0.0.1 at 2021-11-14 07:56:19 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.8ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.4ms | Allocations: 125)
  Rendered layout layouts/application.html.erb (Duration: 14.6ms | Allocations: 4314)
Completed 200 OK in 20ms (Views: 17.9ms | ActiveRecord: 0.0ms | Allocations: 5794)


Started GET "/" for 127.0.0.1 at 2021-11-14 07:56:21 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.1ms | Allocations: 38)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.1ms | Allocations: 40)
  Rendered layout layouts/application.html.erb (Duration: 11.2ms | Allocations: 3565)
Completed 200 OK in 12ms (Views: 11.7ms | ActiveRecord: 0.0ms | Allocations: 4060)


Started GET "/" for 127.0.0.1 at 2021-11-14 07:57:24 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.5ms | Allocations: 141)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 127)
  Rendered layout layouts/application.html.erb (Duration: 19.7ms | Allocations: 4317)
Completed 200 OK in 24ms (Views: 22.7ms | ActiveRecord: 0.0ms | Allocations: 5739)


Started GET "/" for 127.0.0.1 at 2021-11-14 07:57:40 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.6ms | Allocations: 143)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 127)
  Rendered layout layouts/application.html.erb (Duration: 8.6ms | Allocations: 4330)
Completed 200 OK in 12ms (Views: 10.3ms | ActiveRecord: 0.0ms | Allocations: 5812)


Started GET "/" for 127.0.0.1 at 2021-11-14 07:57:55 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.7ms | Allocations: 141)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 127)
  Rendered layout layouts/application.html.erb (Duration: 15.2ms | Allocations: 4322)
Completed 200 OK in 20ms (Views: 18.3ms | ActiveRecord: 0.0ms | Allocations: 5797)


Started GET "/" for 127.0.0.1 at 2021-11-14 07:58:48 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.1ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 127)
  Rendered layout layouts/application.html.erb (Duration: 16.7ms | Allocations: 4320)
Completed 200 OK in 29ms (Views: 21.1ms | ActiveRecord: 0.0ms | Allocations: 5792)


Started GET "/" for 127.0.0.1 at 2021-11-14 08:00:39 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.5ms | Allocations: 141)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 127)
  Rendered layout layouts/application.html.erb (Duration: 19.1ms | Allocations: 4316)
Completed 200 OK in 31ms (Views: 28.7ms | ActiveRecord: 0.0ms | Allocations: 5786)


Started GET "/" for 127.0.0.1 at 2021-11-14 08:00:42 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.1ms | Allocations: 38)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.2ms | Allocations: 40)
  Rendered layout layouts/application.html.erb (Duration: 8.4ms | Allocations: 3562)
Completed 200 OK in 10ms (Views: 9.0ms | Allocations: 4052)


Started GET "/" for 127.0.0.1 at 2021-11-14 08:01:12 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 125)
  Rendered layout layouts/application.html.erb (Duration: 14.1ms | Allocations: 4312)
Completed 200 OK in 18ms (Views: 16.4ms | Allocations: 5721)


Started GET "/" for 127.0.0.1 at 2021-11-14 08:03:47 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.3ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 124)
  Rendered layout layouts/application.html.erb (Duration: 28.3ms | Allocations: 9022)
Completed 200 OK in 36ms (Views: 33.2ms | Allocations: 10478)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/application.css"):
  
Started GET "/" for 127.0.0.1 at 2021-11-14 08:04:07 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.1ms | Allocations: 39)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.1ms | Allocations: 40)
  Rendered layout layouts/application.html.erb (Duration: 25.1ms | Allocations: 7965)
Completed 200 OK in 26ms (Views: 25.6ms | Allocations: 8491)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/application.css"):
  
Started GET "/" for 127.0.0.1 at 2021-11-14 08:11:08 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.2ms | Allocations: 38)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.1ms | Allocations: 40)
  Rendered layout layouts/application.html.erb (Duration: 17.5ms | Allocations: 3609)
Completed 200 OK in 20ms (Views: 18.4ms | Allocations: 4053)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/application.css"):
  
Started GET "/" for 127.0.0.1 at 2021-11-14 09:30:47 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.2ms | Allocations: 38)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.1ms | Allocations: 40)
  Rendered layout layouts/application.html.erb (Duration: 14.3ms | Allocations: 3562)
Completed 200 OK in 18ms (Views: 15.1ms | Allocations: 4005)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/application.css"):
  
Started GET "/rails/info/routes" for 127.0.0.1 at 2021-11-14 09:35:38 +0000
Processing by Rails::InfoController#routes as HTML
  Rendering layout /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/layouts/application.html.erb
  Rendering /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/rails/info/routes.html.erb within layouts/application
  Rendered collection of /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/actionpack-6.1.4.1/lib/action_dispatch/middleware/templates/routes/_route.html.erb [42 times] (Duration: 7.8ms | Allocations: 6576)
  Rendered /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/actionpack-6.1.4.1/lib/action_dispatch/middleware/templates/routes/_table.html.erb (Duration: 1.2ms | Allocations: 757)
  Rendered /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/rails/info/routes.html.erb within layouts/application (Duration: 16.2ms | Allocations: 12238)
  Rendered layout /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/layouts/application.html.erb (Duration: 16.8ms | Allocations: 12470)
Completed 200 OK in 22ms (Views: 18.4ms | Allocations: 13972)


Started GET "/rails/info/routes?path=sign" for 127.0.0.1 at 2021-11-14 09:35:40 +0000
Processing by Rails::InfoController#routes as */*
  Parameters: {"path"=>"sign"}
Completed 200 OK in 4ms (Views: 0.4ms | Allocations: 2089)


Started GET "/rails/info/routes?path=sign_up" for 127.0.0.1 at 2021-11-14 09:35:59 +0000
Processing by Rails::InfoController#routes as */*
  Parameters: {"path"=>"sign_up"}
Completed 200 OK in 3ms (Views: 0.4ms | Allocations: 917)


Started GET "/devise/sessions" for ::1 at 2021-11-14 09:36:18 +0000
  
ActionController::RoutingError (No route matches [GET] "/devise/sessions"):
  
Started GET "/accounts/sign_in(.:format)" for ::1 at 2021-11-14 09:36:30 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/sign_in(.:format)"):
  
Started GET "/" for 127.0.0.1 at 2021-11-14 09:36:36 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.7ms | Allocations: 141)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 124)
  Rendered layout layouts/application.html.erb (Duration: 40.5ms | Allocations: 12157)
Completed 200 OK in 45ms (Views: 43.6ms | Allocations: 13568)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/rails/info/routes" for 127.0.0.1 at 2021-11-14 09:36:48 +0000
Processing by Rails::InfoController#routes as HTML
  Rendering layout /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/layouts/application.html.erb
  Rendering /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/rails/info/routes.html.erb within layouts/application
  Rendered collection of /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/actionpack-6.1.4.1/lib/action_dispatch/middleware/templates/routes/_route.html.erb [42 times] (Duration: 11.1ms | Allocations: 6574)
  Rendered /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/actionpack-6.1.4.1/lib/action_dispatch/middleware/templates/routes/_table.html.erb (Duration: 2.0ms | Allocations: 757)
  Rendered /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/rails/info/routes.html.erb within layouts/application (Duration: 20.6ms | Allocations: 12225)
  Rendered layout /Users/serenabertozzi/.rvm/gems/ruby-3.0.2/gems/railties-6.1.4.1/lib/rails/templates/layouts/application.html.erb (Duration: 21.4ms | Allocations: 12454)
Completed 200 OK in 24ms (Views: 22.9ms | Allocations: 13703)


Started GET "/" for ::1 at 2021-11-14 09:36:50 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.1ms | Allocations: 38)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.1ms | Allocations: 40)
  Rendered layout layouts/application.html.erb (Duration: 11.3ms | Allocations: 3775)
Completed 200 OK in 14ms (Views: 12.1ms | Allocations: 4203)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:37:26 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 254)
  Rendered layout layouts/application.html.erb (Duration: 14.8ms | Allocations: 4507)
Completed 200 OK in 22ms (Views: 19.2ms | Allocations: 5919)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:38:36 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 2.1ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 16.9ms | Allocations: 4466)
Completed 200 OK in 21ms (Views: 19.2ms | Allocations: 5886)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:38:49 +0000
  [1m[35m (1.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.4ms | Allocations: 357)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.4ms | Allocations: 281)
  Rendered layout layouts/application.html.erb (Duration: 14.6ms | Allocations: 11534)
Completed 200 OK in 21ms (Views: 16.3ms | ActiveRecord: 0.0ms | Allocations: 15301)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:41:15 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.9ms | Allocations: 140)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 219)
  Rendered layout layouts/application.html.erb (Duration: 14.1ms | Allocations: 4465)
Completed 200 OK in 18ms (Views: 17.2ms | ActiveRecord: 0.0ms | Allocations: 5992)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:43:27 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.8ms | Allocations: 303)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.9ms | Allocations: 220)
  Rendered layout layouts/application.html.erb (Duration: 16.4ms | Allocations: 4623)
Completed 200 OK in 24ms (Views: 21.4ms | ActiveRecord: 0.0ms | Allocations: 6068)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:43:46 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.6ms | Allocations: 299)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.9ms | Allocations: 220)
  Rendered layout layouts/application.html.erb (Duration: 12.9ms | Allocations: 4616)
Completed 200 OK in 17ms (Views: 15.6ms | ActiveRecord: 0.0ms | Allocations: 6050)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:44:27 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.5ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 226)
  Rendered layout layouts/application.html.erb (Duration: 24.1ms | Allocations: 4618)
Completed 200 OK in 29ms (Views: 28.0ms | ActiveRecord: 0.0ms | Allocations: 6046)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:44:37 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.0ms | Allocations: 220)
  Rendered layout layouts/application.html.erb (Duration: 13.4ms | Allocations: 4620)
Completed 200 OK in 18ms (Views: 16.2ms | ActiveRecord: 0.0ms | Allocations: 6055)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:45:03 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.8ms | Allocations: 302)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.1ms | Allocations: 220)
  Rendered layout layouts/application.html.erb (Duration: 15.8ms | Allocations: 4611)
Completed 200 OK in 20ms (Views: 18.8ms | Allocations: 6036)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:45:19 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.8ms | Allocations: 302)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.9ms | Allocations: 220)
  Rendered layout layouts/application.html.erb (Duration: 16.0ms | Allocations: 4622)
Completed 200 OK in 21ms (Views: 19.9ms | Allocations: 6059)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:45:20 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.2ms | Allocations: 99)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 86)
  Rendered layout layouts/application.html.erb (Duration: 9.0ms | Allocations: 3735)
Completed 200 OK in 11ms (Views: 9.5ms | Allocations: 4203)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:46:07 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 2.3ms | Allocations: 302)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 220)
  Rendered layout layouts/application.html.erb (Duration: 18.3ms | Allocations: 4621)
Completed 200 OK in 23ms (Views: 21.8ms | Allocations: 6032)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:46:09 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.3ms | Allocations: 99)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 86)
  Rendered layout layouts/application.html.erb (Duration: 10.8ms | Allocations: 3734)
Completed 200 OK in 12ms (Views: 11.5ms | Allocations: 4194)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:46:26 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.1ms | Allocations: 304)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.0ms | Allocations: 220)
  Rendered layout layouts/application.html.erb (Duration: 14.6ms | Allocations: 4622)
Completed 200 OK in 19ms (Views: 17.5ms | Allocations: 6033)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:46:36 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.3ms | Allocations: 99)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 86)
  Rendered layout layouts/application.html.erb (Duration: 11.5ms | Allocations: 3734)
Completed 200 OK in 13ms (Views: 12.2ms | Allocations: 4195)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:47:35 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 2.5ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 220)
  Rendered layout layouts/application.html.erb (Duration: 18.8ms | Allocations: 4618)
Completed 200 OK in 27ms (Views: 23.8ms | Allocations: 6029)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 09:47:49 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.2ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 220)
  Rendered layout layouts/application.html.erb (Duration: 17.1ms | Allocations: 4619)
Completed 200 OK in 22ms (Views: 21.1ms | Allocations: 6046)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 09:48:11 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.4ms | Allocations: 268)
  Rendered devise/shared/_links.html.erb (Duration: 0.7ms | Allocations: 598)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 18.2ms | Allocations: 8770)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.1ms | Allocations: 102)
  Rendered layout layouts/application.html.erb (Duration: 34.5ms | Allocations: 12620)
Completed 200 OK in 93ms (Views: 38.6ms | ActiveRecord: 31.6ms | Allocations: 26079)


Started GET "/accounts/sign_in" for ::1 at 2021-11-14 09:48:13 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 0.5ms | Allocations: 271)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 8.7ms | Allocations: 2351)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.2ms | Allocations: 101)
  Rendered layout layouts/application.html.erb (Duration: 14.3ms | Allocations: 6197)
Completed 200 OK in 22ms (Views: 17.1ms | ActiveRecord: 0.0ms | Allocations: 8376)


Started GET "/" for ::1 at 2021-11-14 10:22:48 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 2.1ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 221)
  Rendered layout layouts/application.html.erb (Duration: 17.3ms | Allocations: 4611)
Completed 200 OK in 31ms (Views: 23.1ms | Allocations: 6112)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:25:49 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.8ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 221)
  Rendered layout layouts/application.html.erb (Duration: 16.2ms | Allocations: 4619)
Completed 200 OK in 24ms (Views: 21.9ms | Allocations: 6046)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:26:56 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.1ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 225)
  Rendered layout layouts/application.html.erb (Duration: 15.0ms | Allocations: 4623)
Completed 200 OK in 19ms (Views: 17.4ms | Allocations: 6049)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:27:20 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 2.1ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 16.8ms | Allocations: 4611)
Completed 200 OK in 24ms (Views: 20.6ms | Allocations: 6036)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:27:38 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 14.2ms | Allocations: 4623)
Completed 200 OK in 18ms (Views: 16.5ms | Allocations: 6049)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:27:48 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.3ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 15.3ms | Allocations: 4618)
Completed 200 OK in 20ms (Views: 17.7ms | Allocations: 6045)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:28:03 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.8ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 13.6ms | Allocations: 4620)
Completed 200 OK in 18ms (Views: 16.4ms | Allocations: 6046)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:28:32 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.4ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 221)
  Rendered layout layouts/application.html.erb (Duration: 16.3ms | Allocations: 4619)
Completed 200 OK in 21ms (Views: 19.6ms | Allocations: 6046)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:28:56 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.6ms | Allocations: 99)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.2ms | Allocations: 86)
  Rendered layout layouts/application.html.erb (Duration: 17.3ms | Allocations: 3740)
Completed 200 OK in 20ms (Views: 18.3ms | Allocations: 4200)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:29:17 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.3ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 15.7ms | Allocations: 4614)
Completed 200 OK in 21ms (Views: 19.9ms | Allocations: 6024)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:30:38 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 2.3ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 223)
  Rendered layout layouts/application.html.erb (Duration: 15.9ms | Allocations: 4613)
Completed 200 OK in 24ms (Views: 20.8ms | Allocations: 6040)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:30:54 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.4ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 15.1ms | Allocations: 4612)
Completed 200 OK in 22ms (Views: 19.5ms | Allocations: 6038)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:31:16 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.3ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 15.4ms | Allocations: 4620)
Completed 200 OK in 20ms (Views: 17.9ms | Allocations: 6047)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:31:56 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.9ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 31.9ms | Allocations: 4620)
Completed 200 OK in 41ms (Views: 38.1ms | Allocations: 6046)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:32:43 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 2.0ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 17.9ms | Allocations: 4620)
Completed 200 OK in 27ms (Views: 23.5ms | Allocations: 6046)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:33:06 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 12.8ms | Allocations: 4620)
Completed 200 OK in 18ms (Views: 16.4ms | Allocations: 6046)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:33:15 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.8ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 221)
  Rendered layout layouts/application.html.erb (Duration: 17.4ms | Allocations: 4619)
Completed 200 OK in 24ms (Views: 21.0ms | Allocations: 6046)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:36:50 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.9ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 19.6ms | Allocations: 4611)
Completed 200 OK in 28ms (Views: 24.3ms | Allocations: 6038)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:37:10 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.9ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.2ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 16.1ms | Allocations: 4610)
Completed 200 OK in 20ms (Views: 18.9ms | Allocations: 6108)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:37:22 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 3.4ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.2ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 17.1ms | Allocations: 4620)
Completed 200 OK in 24ms (Views: 21.1ms | Allocations: 6049)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:37:30 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.8ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 15.4ms | Allocations: 4620)
Completed 200 OK in 21ms (Views: 19.0ms | Allocations: 6047)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:38:28 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.4ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 223)
  Rendered layout layouts/application.html.erb (Duration: 15.9ms | Allocations: 4621)
Completed 200 OK in 26ms (Views: 22.5ms | Allocations: 6047)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:38:43 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.3ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 222)
  Rendered layout layouts/application.html.erb (Duration: 16.5ms | Allocations: 4621)
Completed 200 OK in 22ms (Views: 20.2ms | Allocations: 6047)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:38:52 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.4ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 221)
  Rendered layout layouts/application.html.erb (Duration: 14.5ms | Allocations: 4620)
Completed 200 OK in 19ms (Views: 17.5ms | Allocations: 6047)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:40:02 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.9ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 227)
  Rendered layout layouts/application.html.erb (Duration: 17.7ms | Allocations: 4625)
Completed 200 OK in 33ms (Views: 30.5ms | Allocations: 6051)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:40:27 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.8ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 227)
  Rendered layout layouts/application.html.erb (Duration: 15.8ms | Allocations: 4626)
Completed 200 OK in 21ms (Views: 18.9ms | Allocations: 6052)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:41:05 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.3ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 227)
  Rendered layout layouts/application.html.erb (Duration: 13.3ms | Allocations: 4626)
Completed 200 OK in 18ms (Views: 15.9ms | Allocations: 6052)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:41:22 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 0.3ms | Allocations: 99)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 86)
  Rendered layout layouts/application.html.erb (Duration: 12.0ms | Allocations: 3729)
Completed 200 OK in 14ms (Views: 12.8ms | Allocations: 4189)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 10:54:02 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.7ms | Allocations: 228)
  Rendered devise/shared/_links.html.erb (Duration: 1.0ms | Allocations: 489)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 6.7ms | Allocations: 2398)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.2ms | Allocations: 101)
  Rendered layout layouts/application.html.erb (Duration: 17.1ms | Allocations: 6287)
Completed 200 OK in 25ms (Views: 22.4ms | Allocations: 8123)


Started GET "/" for ::1 at 2021-11-14 10:56:48 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.8ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.6ms | Allocations: 225)
  Rendered layout layouts/application.html.erb (Duration: 18.9ms | Allocations: 4614)
Completed 200 OK in 26ms (Views: 23.8ms | Allocations: 6077)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:56:57 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.3ms | Allocations: 300)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 224)
  Rendered layout layouts/application.html.erb (Duration: 13.9ms | Allocations: 4622)
Completed 200 OK in 18ms (Views: 16.3ms | Allocations: 6049)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:57:22 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.0ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 223)
  Rendered layout layouts/application.html.erb (Duration: 15.7ms | Allocations: 4622)
Completed 200 OK in 19ms (Views: 18.1ms | Allocations: 6049)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 10:57:33 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 2.4ms | Allocations: 301)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 223)
  Rendered layout layouts/application.html.erb (Duration: 16.1ms | Allocations: 4622)
Completed 200 OK in 20ms (Views: 18.7ms | Allocations: 6049)


  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
  
ActionController::RoutingError (No route matches [GET] "/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 10:58:58 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.6ms | Allocations: 228)
  Rendered devise/shared/_links.html.erb (Duration: 1.0ms | Allocations: 489)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 4.5ms | Allocations: 2419)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 13.9ms | Allocations: 6749)
Completed 200 OK in 22ms (Views: 19.8ms | Allocations: 8841)


Started GET "/accounts/sign_up" for ::1 at 2021-11-14 10:59:41 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.9ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.0ms | Allocations: 489)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 7.4ms | Allocations: 2417)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 19.2ms | Allocations: 6746)
Completed 200 OK in 25ms (Views: 24.5ms | Allocations: 8724)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 10:59:41 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 11:00:02 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 1.0ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.3ms | Allocations: 489)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 8.2ms | Allocations: 2427)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.9ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 21.5ms | Allocations: 6766)
Completed 200 OK in 27ms (Views: 25.4ms | Allocations: 8724)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:00:02 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 11:00:46 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.8ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.7ms | Allocations: 497)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 6.4ms | Allocations: 2437)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 17.0ms | Allocations: 6777)
Completed 200 OK in 24ms (Views: 23.4ms | Allocations: 8745)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:00:46 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 11:01:30 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.6ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.3ms | Allocations: 497)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 6.9ms | Allocations: 2439)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 18.0ms | Allocations: 6778)
Completed 200 OK in 23ms (Views: 22.3ms | Allocations: 8737)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:01:30 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 11:01:50 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 1.6ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 0.9ms | Allocations: 497)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 7.5ms | Allocations: 2437)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 18.0ms | Allocations: 6776)
Completed 200 OK in 25ms (Views: 23.7ms | Allocations: 8734)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:01:50 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 11:02:05 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.6ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.0ms | Allocations: 497)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 7.2ms | Allocations: 2437)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 17.7ms | Allocations: 6776)
Completed 200 OK in 23ms (Views: 21.9ms | Allocations: 8741)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:02:05 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 11:02:20 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.9ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 2.4ms | Allocations: 497)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 8.3ms | Allocations: 2437)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 22.0ms | Allocations: 6776)
Completed 200 OK in 30ms (Views: 28.9ms | Allocations: 8734)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:02:21 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_up" for ::1 at 2021-11-14 11:04:17 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.9ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.2ms | Allocations: 497)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 7.2ms | Allocations: 2437)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 20.7ms | Allocations: 6776)
Completed 200 OK in 30ms (Views: 28.6ms | Allocations: 8734)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:04:17 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:04:26 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 0.5ms | Allocations: 176)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 4.5ms | Allocations: 1542)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.2ms | Allocations: 101)
  Rendered layout layouts/application.html.erb (Duration: 14.2ms | Allocations: 5570)
Completed 200 OK in 18ms (Views: 16.9ms | Allocations: 7113)


Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:05:16 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 2.6ms | Allocations: 1609)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 6.3ms | Allocations: 3084)
  Rendered layout layouts/application.html.erb (Duration: 6.5ms | Allocations: 3159)
Completed 500 Internal Server Error in 12ms (Allocations: 5199)


  
ActionView::SyntaxErrorInTemplate (Encountered a syntax error while rendering template: check <%- if controller_name != 'sessions' %>
  <%= link_to "Log in", new_session_path(resource_name), class: "btn btn-dark" %><br />
<% end %>

<%- if devise_mapping.registerable? && controller_name != 'registrations' %>
  <%= link_to "Sign up", new_registration_path(resource_name), , class: "btn btn-dark" %><br />
<% end %>

<%- if devise_mapping.recoverable? && controller_name != 'passwords' && controller_name != 'registrations' %>
  <%= link_to "Forgot your password?", new_password_path(resource_name), class: "link-dark" %><br />
<% end %>

<%- if devise_mapping.confirmable? && controller_name != 'confirmations' %>
  <%= link_to "Didn't receive confirmation instructions?", new_confirmation_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks' %>
  <%= link_to "Didn't receive unlock instructions?", new_unlock_path(resource_name) %><br />
<% end %>

<%- if devise_mapping.omniauthable? %>
  <%- resource_class.omniauth_providers.each do |provider| %>
    <%= link_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), method: :post %><br />
  <% end %>
<% end %>

):
1:    <%- if controller_name != 'sessions' %>
2:      <%= link_to "Log in", new_session_path(resource_name), class: "btn btn-dark" %><br />
3:    <% end %>
4:    
5:    <%- if devise_mapping.registerable? && controller_name != 'registrations' %>
6:      <%= link_to "Sign up", new_registration_path(resource_name), , class: "btn btn-dark" %><br />
7:    <% end %>
8:    
9:    <%- if devise_mapping.recoverable? && controller_name != 'passwords' && controller_name != 'registrations' %>
10:      <%= link_to "Forgot your password?", new_password_path(resource_name), class: "link-dark" %><br />
11:    <% end %>
12:    
13:    <%- if devise_mapping.confirmable? && controller_name != 'confirmations' %>
14:      <%= link_to "Didn't receive confirmation instructions?", new_confirmation_path(resource_name) %><br />
15:    <% end %>
16:    
17:    <%- if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks' %>
18:      <%= link_to "Didn't receive unlock instructions?", new_unlock_path(resource_name) %><br />
19:    <% end %>
20:    
21:    <%- if devise_mapping.omniauthable? %>
22:      <%- resource_class.omniauth_providers.each do |provider| %>
23:        <%= link_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), method: :post %><br />
24:      <% end %>
25:    <% end %>
  
app/views/devise/shared/_links.html.erb:6: syntax error, unexpected ','
app/views/devise/shared/_links.html.erb:6: syntax error, unexpected ','
app/views/devise/shared/_links.html.erb:6: syntax error, unexpected ','
app/views/devise/shared/_links.html.erb:6: syntax error, unexpected ','
app/views/devise/shared/_links.html.erb:6: syntax error, unexpected ','
app/views/devise/shared/_links.html.erb:6: syntax error, unexpected ','
app/views/devise/sessions/new.html.erb:26
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:05:35 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 1.0ms | Allocations: 574)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 5.0ms | Allocations: 2047)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 19.1ms | Allocations: 6386)
Completed 200 OK in 25ms (Views: 23.6ms | Allocations: 8468)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:05:35 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:09:05 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 1.8ms | Allocations: 581)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 13.3ms | Allocations: 2087)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.1ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 30.9ms | Allocations: 6426)
Completed 200 OK in 41ms (Views: 38.4ms | Allocations: 8466)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:09:06 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:09:53 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 1.3ms | Allocations: 582)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 5.6ms | Allocations: 2080)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.6ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 17.0ms | Allocations: 6419)
Completed 200 OK in 23ms (Views: 22.4ms | Allocations: 8459)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:09:53 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:10:15 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 1.5ms | Allocations: 581)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 5.3ms | Allocations: 2079)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 15.7ms | Allocations: 6418)
Completed 200 OK in 21ms (Views: 19.8ms | Allocations: 8458)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:10:16 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:10:17 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 0.4ms | Allocations: 164)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 2.8ms | Allocations: 1032)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 88)
  Rendered layout layouts/application.html.erb (Duration: 20.7ms | Allocations: 4701)
Completed 200 OK in 23ms (Views: 21.3ms | Allocations: 5426)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:10:17 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:10:30 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 1.4ms | Allocations: 581)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 5.2ms | Allocations: 2084)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.8ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 15.9ms | Allocations: 6423)
Completed 200 OK in 20ms (Views: 19.5ms | Allocations: 8407)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:10:30 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:10:37 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 1.4ms | Allocations: 581)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 7.4ms | Allocations: 2079)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 18.6ms | Allocations: 6418)
Completed 200 OK in 25ms (Views: 23.0ms | Allocations: 8460)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:10:37 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:10:39 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 0.4ms | Allocations: 164)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 2.1ms | Allocations: 1032)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 87)
  Rendered layout layouts/application.html.erb (Duration: 13.6ms | Allocations: 4700)
Completed 200 OK in 16ms (Views: 14.3ms | Allocations: 5424)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:10:39 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:10:48 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 1.6ms | Allocations: 581)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 7.0ms | Allocations: 2079)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 18.1ms | Allocations: 6418)
Completed 200 OK in 26ms (Views: 23.7ms | Allocations: 8403)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:10:48 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:25:04 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 2.7ms | Allocations: 581)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 7.2ms | Allocations: 2079)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.9ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 19.9ms | Allocations: 6417)
Completed 200 OK in 31ms (Views: 28.2ms | Allocations: 8447)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:25:05 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:25:12 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 0.4ms | Allocations: 164)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 3.3ms | Allocations: 1032)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 87)
  Rendered layout layouts/application.html.erb (Duration: 13.0ms | Allocations: 4700)
Completed 200 OK in 15ms (Views: 13.7ms | Allocations: 5424)


Started GET "/accounts/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:25:12 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 11:25:33 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.3ms | Allocations: 440)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.2ms | Allocations: 91)
  Rendered layout layouts/application.html.erb (Duration: 10.6ms | Allocations: 4321)
Completed 200 OK in 14ms (Views: 13.0ms | Allocations: 5542)


Started GET "/accounts/sign_in" for ::1 at 2021-11-14 11:28:38 +0000
Processing by Devise::SessionsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/sessions/new.html.erb within layouts/application
  Rendered devise/shared/_links.html.erb (Duration: 0.3ms | Allocations: 164)
  Rendered devise/sessions/new.html.erb within layouts/application (Duration: 3.3ms | Allocations: 1115)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.9ms | Allocations: 87)
  Rendered layout layouts/application.html.erb (Duration: 16.0ms | Allocations: 4868)
Completed 200 OK in 20ms (Views: 17.0ms | Allocations: 5633)


Started GET "/accounts/password/new" for ::1 at 2021-11-14 11:28:39 +0000
Processing by Devise::PasswordsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/passwords/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.6ms | Allocations: 230)
  Rendered devise/shared/_links.html.erb (Duration: 0.2ms | Allocations: 181)
  Rendered devise/passwords/new.html.erb within layouts/application (Duration: 3.2ms | Allocations: 1531)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.2ms | Allocations: 101)
  Rendered layout layouts/application.html.erb (Duration: 9.6ms | Allocations: 5345)
Completed 200 OK in 13ms (Views: 11.0ms | Allocations: 6865)


Started GET "/accounts/password/new" for ::1 at 2021-11-14 11:30:56 +0000
Processing by Devise::PasswordsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/passwords/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.9ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.8ms | Allocations: 564)
  Rendered devise/passwords/new.html.erb within layouts/application (Duration: 7.0ms | Allocations: 2010)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.1ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 19.1ms | Allocations: 6323)
Completed 200 OK in 27ms (Views: 25.4ms | Allocations: 8270)


Started GET "/accounts/password/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:30:56 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/password/assets/stylesheets/style.css"):
  
Started GET "/accounts/password/new" for ::1 at 2021-11-14 11:31:11 +0000
Processing by Devise::PasswordsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/passwords/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.9ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.5ms | Allocations: 564)
  Rendered devise/passwords/new.html.erb within layouts/application (Duration: 7.3ms | Allocations: 2007)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.9ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 19.4ms | Allocations: 6320)
Completed 200 OK in 27ms (Views: 23.9ms | Allocations: 8235)


Started GET "/accounts/password/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:31:11 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/password/assets/stylesheets/style.css"):
  
Started GET "/accounts/password/new" for ::1 at 2021-11-14 11:31:20 +0000
Processing by Devise::PasswordsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/passwords/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 1.0ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.5ms | Allocations: 564)
  Rendered devise/passwords/new.html.erb within layouts/application (Duration: 6.2ms | Allocations: 2008)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.5ms | Allocations: 238)
  Rendered layout layouts/application.html.erb (Duration: 18.4ms | Allocations: 6327)
Completed 200 OK in 23ms (Views: 21.1ms | Allocations: 8242)


Started GET "/accounts/password/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:31:20 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/password/assets/stylesheets/style.css"):
  
Started GET "/accounts/password/new" for ::1 at 2021-11-14 11:31:35 +0000
Processing by Devise::PasswordsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/passwords/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 1.0ms | Allocations: 229)
  Rendered devise/shared/_links.html.erb (Duration: 1.2ms | Allocations: 564)
  Rendered devise/passwords/new.html.erb within layouts/application (Duration: 7.7ms | Allocations: 2008)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.7ms | Allocations: 232)
  Rendered layout layouts/application.html.erb (Duration: 18.9ms | Allocations: 6321)
Completed 200 OK in 24ms (Views: 22.2ms | Allocations: 8235)


Started GET "/accounts/password/assets/stylesheets/style.css" for ::1 at 2021-11-14 11:31:35 +0000
  
ActionController::RoutingError (No route matches [GET] "/accounts/password/assets/stylesheets/style.css"):
  
Started GET "/" for ::1 at 2021-11-14 11:33:22 +0000
Processing by PublicController#index as HTML
  Rendering layout layouts/application.html.erb
  Rendering public/index.html.erb within layouts/application
  Rendered public/index.html.erb within layouts/application (Duration: 1.4ms | Allocations: 298)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 1.4ms | Allocations: 91)
  Rendered layout layouts/application.html.erb (Duration: 15.2ms | Allocations: 4287)
Completed 200 OK in 20ms (Views: 18.6ms | Allocations: 5535)


Started GET "/accounts/sign_up" for ::1 at 2021-11-14 11:33:23 +0000
Processing by Devise::RegistrationsController#new as HTML
  Rendering layout layouts/application.html.erb
  Rendering devise/registrations/new.html.erb within layouts/application
  Rendered devise/shared/_error_messages.html.erb (Duration: 0.1ms | Allocations: 53)
  Rendered devise/shared/_links.html.erb (Duration: 0.2ms | Allocations: 121)
  Rendered devise/registrations/new.html.erb within layouts/application (Duration: 3.6ms | Allocations: 1773)
[Webpacker] Everything's up-to-date. Nothing to do
  Rendered shared/_navbar.html.erb (Duration: 0.3ms | Allocations: 101)
  Rendered layout layouts/application.html.erb (Duration: 11.4ms | Allocations: 5632)
Completed 200 OK in 17ms (Views: 15.6ms | Allocations: 7671)


